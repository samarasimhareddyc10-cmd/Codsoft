import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Generate Synthetic Data
np.random.seed(42)
num_samples = 100

# Create features
amount = np.random.randint(10, 1000, num_samples)
time = np.random.randint(1, 1000, num_samples)
feature1 = np.random.rand(num_samples)
feature2 = np.random.rand(num_samples)

# Create labels (10% fraud)
is_fraud = np.zeros(num_samples)
fraud_indices = np.random.choice(num_samples, size=10, replace=False)
is_fraud[fraud_indices] = 1

# Create DataFrame
df = pd.DataFrame({
    'Amount': amount,
    'Time': time,
    'Feature1': feature1,
    'Feature2': feature2,
    'IsFraud': is_fraud
})

# Step 2: Scale 'Amount' and 'Time'
scaler = StandardScaler()
df[['Amount', 'Time']] = scaler.fit_transform(df[['Amount', 'Time']])

# Step 3: Features and target
X = df[['Amount', 'Time', 'Feature1', 'Feature2']]
y = df['IsFraud']

# Step 4: Split with stratification
X_train, X_val, y_train, y_val = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

# Step 5: Train model
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 6: Predict
y_pred = model.predict(X_val)

# Step 7: Evaluate
print("Accuracy:", round(accuracy_score(y_val, y_pred), 2))
print("\nClassification Report:\n", classification_report(
    y_val, y_pred, labels=[0, 1], zero_division=0))
print("\nConfusion Matrix:\n", confusion_matrix(y_val, y_pred, labels=[0, 1]))